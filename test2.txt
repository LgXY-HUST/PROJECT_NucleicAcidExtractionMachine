/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "w25Q16.h" 
//int fputc(int ch, FILE *f)
//{
//	HAL_UART_Transmit(&huart1,(uint8_t*)&ch,1,10);
//	return ch;
//}



/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t flag=0;
uint8_t aaa1[256]={0};
int ccc[256] ={0};
int ccc1[256] ={0};
uint16_t a=0;
uint8_t testbuffer[256]={0};
uint8_t testbuffer1[259]={0};
void SPI1_DMA_TX_CpltCallback( struct __DMA_HandleTypeDef * hdma);
//void writepage(uint8_t block , uint8_t page , uint8_t * a )
//{
//	flag=0;
//	W25QXX_Write_Enable();
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);	
//	SPI1_ReadWriteByte((uint8_t)W25X_PageProgram);
//	SPI1_ReadWriteByte((uint8_t)block);
//	SPI1_ReadWriteByte((uint8_t)page);	
//	SPI1_ReadWriteByte((uint8_t)0x00);	
////	for(int i=0;i<256;i++){
////		SPI1_ReadWriteByte((uint8_t)testbuffer[i]);
////	}

//	HAL_SPI_TransmitReceive_DMA(&hspi1 ,testbuffer ,aaa1 ,256 );
////	hdma_spi1_tx.XferCpltCallback=SPI1_DMA_TX_CpltCallback;
////	while(a11){
////		a11=(__HAL_DMA_GET_COUNTER(&hdma_spi1_tx));
////	}
////	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);		
////	W25QXX_Wait_Busy();					   //等待写入结束
//}


//void writepage(uint8_t block , uint8_t page , uint8_t * a )
//{
//	flag=0;
//	W25QXX_Write_Enable();
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);	
//	SPI1_ReadWriteByte((uint8_t)W25X_PageProgram);
//	SPI1_ReadWriteByte((uint8_t)block);
//	SPI1_ReadWriteByte((uint8_t)page);	
//	SPI1_ReadWriteByte((uint8_t)0x00);
//	HAL_SPI_TransmitReceive_DMA(&hspi1 ,testbuffer ,aaa1 ,256 );
//}
//void DMA2_Stream3_IRQHandler()
//{
//	HAL_DMA_IRQHandler(&hdma_spi1_tx);		
//	if(__HAL_DMA_GET_IT_SOURCE(&hdma_spi1_rx, DMA_IT_TC)){
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
//  }
//}


void writepage(uint8_t block , uint8_t page , uint8_t * a )
{
	flag=0;
	W25QXX_Write_Enable();
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);	
	SPI1_ReadWriteByte((uint8_t)W25X_PageProgram);
	SPI1_ReadWriteByte((uint8_t)block);
	SPI1_ReadWriteByte((uint8_t)page);	
	SPI1_ReadWriteByte((uint8_t)0x00);
	HAL_SPI_Transmit_DMA(&hspi1 ,testbuffer  ,256 );
}
void DMA2_Stream3_IRQHandler()
{
	HAL_DMA_IRQHandler(&hdma_spi1_tx);		
	if(__HAL_DMA_GET_IT_SOURCE(&hdma_spi1_tx, DMA_IT_TC)){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
  }
}


//----------------------------------------------------------------------------//


#define  				SizeOfInfo_Max 				(uint8_t)33   //the size of information union
#define  				PosOfPointer 					(uint8_t)32		//subscribe of data array pointer
#define  				PosOfFlag		 					(uint8_t)30	 	//subscribe of flag 
#define 				PosOfLenth						(uint8_t)31		//subscribe of flag which define the effective length of data
#define					LenthOfBuffer					(uint8_t)29		//Size of data buffer


typedef struct UpperCPUCmd
{
	uint8_t type;//type of the message from upper computer
	uint8_t Upper_Data[LenthOfBuffer]; //count from 1 to SizeOfInfo_Max
	uint8_t Flag;//0x0a表示开始接收，0x0b表示接收完成，0x0e表示还没有接收
	uint8_t Size;//数据大小
	uint8_t pointer;//point to next position recieving data
}UpperCPUCmd;


typedef union UpperCmd
{
	UpperCPUCmd Data;
	uint8_t DataArray[SizeOfInfo_Max];	
}UpperCmd;

UpperCmd UpperCPU1;

void UpperCPUInit(UpperCmd* upcmd);

void UpperCPUInit(UpperCmd* upcmd)
{
	for(int i=0;i<SizeOfInfo_Max;i++){
		upcmd->DataArray[i]=0;
	}
	UpperCPU1.DataArray[PosOfFlag]=0x0e;
}

//串口数据，0x0a
void UsartDataHandler(UpperCmd *uppercmd)	
{
	if((uppercmd->DataArray[PosOfFlag]==0x0a))//还没有接收完
	{
		if(uppercmd->DataArray[PosOfPointer]==0)//received the data tpye
		{
			if(uppercmd->DataArray[uppercmd->DataArray[PosOfPointer]]==0xf0){//action cmd
				uppercmd->DataArray[PosOfLenth]=1;
			}else if(uppercmd->DataArray[uppercmd->DataArray[PosOfPointer]]==0xf1) {//action cmd
				uppercmd->DataArray[PosOfLenth]=28;
			}
			uppercmd->DataArray[PosOfPointer]++;//update pointer
		}
		else if(uppercmd->DataArray[PosOfPointer]<=uppercmd->DataArray[PosOfLenth])//havn`t finish recieving
		{
			uppercmd->DataArray[PosOfPointer]++;//continue recieving
		}
		else if(uppercmd->DataArray[PosOfPointer]==uppercmd->DataArray[PosOfLenth]+1)
		{
			if(uppercmd->DataArray[uppercmd->DataArray[PosOfPointer]]==0xff)//receiving done
			{
				uppercmd->DataArray[PosOfFlag]=0x0b;//finish
			}
			else{
				uppercmd->DataArray[PosOfFlag]=0xee;//error			
			}
		}			
	}
	else if(uppercmd->DataArray[PosOfFlag]==0x0e)//recieving havn`t been started yet
	{
		if(uppercmd->DataArray[uppercmd->DataArray[PosOfPointer]]==0x00)//recieve start signal
		{
			uppercmd->DataArray[PosOfFlag]=0x0a;//start
		}
		else
		{
			uppercmd->DataArray[PosOfFlag]=0xee;//error
		}			
	}
}




void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{	
	if(huart->Instance==USART1)
	{
		UsartDataHandler(&UpperCPU1);
		if(UpperCPU1.DataArray[PosOfFlag]==0xee)
		{

			UpperCPU1.DataArray[PosOfFlag]=0x0e;
			UpperCPU1.DataArray[PosOfLenth]=0;
			UpperCPU1.DataArray[PosOfPointer]=0;
		}
		HAL_UART_Receive_IT(&huart1,&(UpperCPU1.DataArray[UpperCPU1.DataArray[PosOfPointer]]),1);		
	}
}









/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_DMA_Init();
  MX_SPI1_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
	
	for(int i=0 ; i<256 ; i++){
		testbuffer[i]=255-i;
		if(testbuffer[i]>=5){
			testbuffer[i]-=4;
		}
	}
	
	UpperCPUInit(&UpperCPU1);
	HAL_UART_Receive_IT(&huart1,&(UpperCPU1.DataArray[UpperCPU1.DataArray[PosOfPointer]]),1);		
	
	
	
	
//__HAL_SPI_ENABLE(&hspi1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	float aa=1.4143;
	float bb=1.4423;
	float c=0;
	long int i=0;
//	W25QXX_Erase_Chip();
	W25QXX_Erase_Sector(0x00000000);
	W25QXX_Erase_Sector(0x00000100);
	writepage(0,1,testbuffer);
	HAL_Delay(1000);
	W25QXX_Wait_Busy();
	for(int i=0 ; i<256 ; i++){
		testbuffer[i]=i;
		if(testbuffer[i]>=5){
			testbuffer[i]-=4;
		}
	}	
//	HAL_Delay(1000);
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);	
//	HAL_SPI_TransmitReceive_DMA(&hspi1 ,testbuffer1 , aaa1 , 259 );
//	HAL_Delay(2000);
//	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);		
	writepage(0,0,testbuffer);
	HAL_Delay(1000);
	W25QXX_Read(testbuffer , 0x000100 , 256);
	for(int i=0 ; i<256 ; i++){
		ccc[i]=testbuffer[i];
	}	
	W25QXX_Read(testbuffer , 0x000000 , 256);
	for(int i=0 ; i<256 ; i++){
		ccc1[i]=testbuffer[i];
	}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    static unsigned char ledState = 0;
    if (htim == (&htim1))
    {
        if (ledState == 0)
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
        else
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
        ledState = !ledState;
    }
}
//void DMA2_Stream3_IRQHandler()
//{
//	HAL_DMA_IRQHandler(&hdma_spi1_tx);		
//	if(__HAL_DMA_GET_IT_SOURCE(&hdma_spi1_rx, DMA_IT_TC)){
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
//  }
//}

void SPI1_DMA_TX_CpltCallback( struct __DMA_HandleTypeDef * hdma)
{
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);	
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
